var fm=Ext.form;var gridView = Ext.extend(Ext.grid.GridView, {	appendNewRow: function () {		var cs = this.getColumnData();		delete cs[2].style;		var keyId = "id" + (new Date()).valueOf();		var k = "<div id='" + keyId + "'></div>";		var valId = keyId + "1";		var val = "<div id='" + valId + "'></div>";		var btnId = valId + "1";		var btn = "<div class='x-tool x-tool-add' id='" + btnId + "'></div>";		var rs = [new Ext.data.Record({ vKey: k, vValue: val, EMPTY: btn }, k)];		var ds = this.grid.store;		var rowHTML = this.doRender(cs, rs, ds, 0, 3);		rowHTML = rowHTML.replace("x-grid3-row", "");		Ext.DomHelper.append(this.mainBody, rowHTML);		var keyField = new Ext.form.TextField({ "selectOnFocus": true, "emptyText": "Name", "renderTo": keyId ,"allowBlank": false,style:"width:90%" });		var valField = new Ext.form.TextField({ "selectOnFocus": true, "emptyText": "Value", "renderTo": valId,"allowBlank": false,style:"width:90%" });		var btnField = Ext.get(btnId);		var g = this.grid;		btnField.on("click", function () { g.addItem(keyField, valField); });	}	, layout: function () {		this.appendNewRow();		gridView.superclass.layout.call(this);	}	, init: function (grid) {		gridView.superclass.init.call(this, grid);		var html = this.templates.row.html;		this.templates.row.html = html.replace('cellpadding="0" style="{tstyle}', 'cellpadding="0" style="table-layout:fixed;{tstyle}');		this.templates.row.compile();	}});var ListField=Ext.extend(Ext.Component,{	onRender:function(ctnr,pos){		//ListField.superclass.onRender.call(this,ctnr,pos);				var store=new Ext.data.JsonStore({	        data:{data:[]},			autoLoad:true,			root : "data"			,fields: ["vKey","vValue",'EMPTY']		});		var field=this;		var cm= new Ext.grid.ColumnModel([			   {	           header: "变量名",	           dataIndex: 'vKey',	           width: 80,	           editor: new fm.TextField({	               allowBlank: false	           })	        },{	           header: "变量值",	           width: 80,	           dataIndex: 'vValue',	           editor: new fm.TextField({	               allowBlank: false	           })	        },{ dataIndex: 'EMPTY', width: 20, menuDisabled: true            	, css: "background:url(../res/js/ext2/resources/images/default/layout/panel-close.gif) no-repeat center;cursor:pointer;"	        }        ]);		this.list=new Ext.grid.EditorGridPanel({			store:store			,cm:cm			,view:new gridView()			,renderTo:ctnr			,clicksToEdit:1			,width:field.width			,listeners:{				afteredit:function(){					this.afterEdit();				}			}			,afterEdit:function(){			       var datar = new Array();     			       var jsonDataEncode = "";  			       var records = store.getRange();   			       for (var i = 0; i < records.length; i++) {      			            datar.push(records[i].data);      			       } 					field.setValue(datar);			}            , addItem: function (keyField, valField,desField) {                if (!keyField.validate())                    return;                var key = keyField.getValue();                var val = valField.getValue();                var v = this.view;                var ds = this.store;                ds.add(new Ext.grid.PropertyRecord({ vKey: key, vValue: val }));                this.refreshView();            }            , deleteItem: function (rowIndex) {                var v = this.view;                var ds = this.store;                if (ds.getCount() < 1) {                    return;                }                ds.data.removeAt(rowIndex);                v.removeRows(rowIndex, rowIndex);                this.refreshView();            }            , refreshView: function () {                var v = this.view;                v.scroller.dom.style.height = "auto";                v.scroller.dom.style.width = "auto";                v.el.dom.style.height = "auto";                v.refresh();				this.afterEdit();            }            , afterRender: function () {                this.selModel.on('beforecellselect', function (sm, rowIndex, colIndex) {                    if (colIndex === 2) {                        this.deleteItem(rowIndex);                        return false;                    }                }, this);                Ext.grid.EditorGridPanel.superclass.afterRender.apply(this, arguments);                if (this.source) {                    this.setSource(this.source);                }            }            , processEvent: function (name, e) {                this.fireEvent(name, e);                var t = e.getTarget();                var v = this.view;                var header = v.findHeaderIndex(t);                if (header !== false) {                    this.fireEvent("header" + name, this, header, e);                } else {                    var row = v.findRowIndex(t);                    if (row == undefined)//for row to add item;                        return;                    var cell = v.findCellIndex(t);                    if (row !== false) {                        this.fireEvent("row" + name, this, row, e);                        if (cell !== false) {                            this.fireEvent("cell" + name, this, row, cell, e);                        }                    }                }            }					});		this.el=this.list.el;	}	,value:null	,list:null	,recordType:[]	,setValue:function(v){		this.value=Ext.encode(v);	}	,getValue:function(){		return this.value;		}	});Ext.reg("listfield",ListField);